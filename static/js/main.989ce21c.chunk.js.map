{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["req","XMLHttpRequest","App","class","href","open","send","onload","json","JSON","parse","responseText","h","p","d3","append","text","attr","xScale","domain","Date","d","range","w","clamp","nice","yScale","svg","box","style","selectAll","data","enter","length","on","this","getAttribute","i","html","e","xA","yA","ticks","tickFormat","timeFormat","call","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.989ce21c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport * as d3 from 'd3';\nimport { timeFormat } from 'd3';\n\n// used answer from https://stackoverflow.com/questions/27530462/tag-error-react-jsx-style-tag-error-on-render by Sebastian to show me how to place CSS styling directly in App.js\nconst css = `\nbody {\n  background-color: lightGray;\n}\na {\n  font-size: 12px;\n}\n#tooltip {\n  background-color: rgb(151, 224, 148, 0.7);\n  box-shadow: 0 0 5px 3px rgb(15, 15, 15, 0.8);\n  font-size: 11px;\n  float: right;\n  min-height: 30px;\n  text-align: left;\n  border-radius: 10px;\n  min-width: 150px;\n  text-align: center;\n  padding: 10px;\n  z-index: 999;\n  position: absolute;\n  top: 90px; }\n\n  svg {\n    margin-top: -60px;\n    margin-bottom: -60px;\n  }\n\n  #foot {\n    font-size: 14px;\n    font-weight: 700;\n    text-align: center;\n  }\n\n`\n\nconst req = new XMLHttpRequest();\n    req.open(\"GET\", 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json', true)\n    req.send()\n    req.onload = function() {\n      let json = JSON.parse(req.responseText);\n  \n      const w = 990;\n      const h = 600;\n      const p = 100;\n\n      \n      d3.select('.App').append('h1').text(\"Professional Cyclists and Times, Doping vs Not\").attr('id', 'title') \n     \n      \n        \n      const xScale = d3.scaleTime()\n                       .domain([new Date(1994, 1 ,1), new Date(d3.max(json, (d) => d['Year']),1,1) ])\n                       .range([p, w-p])\n                       .clamp(true)\n                       .nice();\n\n     \n\n      const yScale = d3.scaleTime() //passing a string into the date object was the idea I got from https://forum.freecodecamp.org/t/d3-difficulty-getting-the-y-axis-to-show-time/261140\n                       .domain([(new Date('Saturday June 30, 2020 12:' + d3.max(json, (d) =>  d['Time']) )), (new Date('Saturday June 30, 2020 12:' + d3.min(json, (d) =>  d['Time']))) ])\n                       .range([h-p, p]);             \n                           \n\n      const svg = d3.select('.App')\n                    .append('svg')\n                    .attr('height', h)\n                    .attr('width', w);\n\n  let box = d3.select('.App').append('div').text('hello').attr('id', 'tooltip').style('display', 'none'); //inspired by the last answer on this post (https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6)    \n  \n \n      svg.selectAll('circle')\n         .data(json) \n         .enter()    \n         .append('circle')\n         .attr('cx', (d) => (xScale(new Date('January 1,'+d['Year']))) )\n         .attr('cy', (d) => h-(h-yScale(new Date('Saturday June 30, 2020 12:'+d['Time']) )-p)-p)  \n         .attr('r', 6)\n         .attr('class', 'dot')\n         .attr('data-xvalue', (d) => d['Year'])\n         .attr('data-yvalue', (d) => new Date('Saturday June 30, 2020 12:'+d['Time']))\n         .attr('nom', (d) => d['Name'])\n         .attr('time', (d) => d[\"Time\"])\n         .attr('drugs', (d)=> d['Doping'])\n         .attr('country', (d) => d['Nationality'])\n         .style('fill', function(d) { if (d['Doping'].length===0) {return 'purple'} else {return 'green'}})\n         .style('stroke', 'black')\n         .style('stroke-width', '1')\n         .on('mouseover', function() {\n          box = box.attr('data-year', this.getAttribute('data-xvalue')) \n                   .style('display', 'inline')\n                   .style('transform', (i) => \"translate(\" + (this.getAttribute('cx') - w ) + \"px\" + \",\" + (this.getAttribute('cy') - 50) + \"px)\")\n                   .html((e) => '<div style=\"text-align:left;\">Name: ' + this.getAttribute('nom')+ ', ' + this.getAttribute('country') + '</div>' + '<div style=\"text-align:left;\">' + 'Year: ' + this.getAttribute('data-xvalue') + ', Time: ' + this.getAttribute('time') + '</div>' + '<div style=\"text-align:left;width:250px;\">' + this.getAttribute('drugs') + '</div>')\n                   })\n                            \n        .on('mouseout', function () {\n          box = box.style('display', 'none')\n        });\n        // I picked up adding the text anchor to the text label for the axis from here https://stackoverflow.com/questions/11189284/d3-axis-labeling \n        svg.append('text').text(\"Time in Minutes\").attr('text-anchor', 'end').attr('x', '-100').attr('y', 50).style('transform', 'rotate(270deg) ').style('font-size', '12px').style('font-weight', '700') \n        \n\n        const xA = d3.axisBottom(xScale)\n \n        const yA = d3.axisLeft(yScale)\n                     .ticks(10)\n                     .tickFormat(timeFormat(\"%M:%S\"))\n           \n         svg.append('g')\n            .attr('transform', \"translate(0,\" + (h-p) + \")\")\n            .attr('id', 'x-axis')\n            .call(xA)\n     \n        svg.append('g') \n            .attr('transform', \"translate(\" + p + \",0)\")  \n            .attr('id', 'y-axis')\n            .call(yA) \n    \n\n            svg.append('foreignObject')\n            // I picked up the use of foreignObject to append a div to an svg from here https://bl.ocks.org/Jverma/2385cb7794d18c51e3ab\n            .attr('width', 200)\n            .attr('height', 50)\n            .attr('x', 780)\n            .attr('y', 380)\n            \n            .attr('id', 'legend')\n            .style('text-align', 'left')\n            .style('font-size', '12px')\n            .style('font-weight', '700')            \n            .html(`<div syle='text-align:left;'><div id='b1' style=\"background-color:green;height:18px;width:18px;display:inline-block;\">&nbsp;&nbsp;&nbsp;</div> Doping<br> <div id='b2' style=\"background-color:purple;height:18px;width:18px;display:inline-block;\">&nbsp;</div> Not Doping</div>`)\n              \n    d3.select('body').append('div').attr('id', 'foot').text('Coded by LeiCorre w/ code Refs at top')\n    }\n\nfunction App() {\n  return (\n    <div class=\"App\">\n\n     <style>{css}</style> \n    <a href=\"https://bl.ocks.org/Jverma/2385cb7794d18c51e3ab\">Using foreignObject</a>&nbsp;|&nbsp;\n    <a href=\"https://stackoverflow.com/questions/11189284/d3-axis-labeling\">Using Anchortext</a>&nbsp;|&nbsp;\n    <a href=\"https://forum.freecodecamp.org/t/d3-difficulty-getting-the-y-axis-to-show-time/261140\">Passing the Time object a string</a>&nbsp;|&nbsp;\n    <a href='https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6'>Tooltip Reference</a>\n    <a href='https://stackoverflow.com/questions/27530462/tag-error-react-jsx-style-tag-error-on-render'>Inline CSS Styling</a>\n    </div>\n  );\n\n}\nReactDOM.render(<App />, document.getElementById('root'))\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}